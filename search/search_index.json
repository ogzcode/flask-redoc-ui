{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Flask Pydantic ReDoc","text":"<p>Flask Pydantic ReDoc is an extension that allows you to generate OpenAPI documentation for your Flask applications. It helps you document your APIs using Pydantic models and view them through the ReDoc UI.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\u2728 Schema generation with Pydantic models</li> <li>\ud83d\udcdd Automatic documentation from docstrings in Flask routes</li> <li>\ud83c\udfa8 Modern and user-friendly interface with ReDoc UI</li> <li>\ud83d\udd04 OpenAPI 3.0.2 support</li> <li>\ud83d\udee0\ufe0f Easy configuration</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>For detailed information, you can explore the following sections:</p> <ul> <li>Installation Guide</li> <li>Getting Started Guide</li> <li>Pydantic Integration</li> </ul>"},{"location":"#contact","title":"Contact","text":"<p>For any questions, suggestions, or feedback, you can reach us through the following channels:</p> <ul> <li>GitHub: github.com/ogzcode/flask-redoc-ui</li> </ul> <p>For bug reports and feature requests, please open an issue on GitHub.</p>"},{"location":"getting-started/","title":"Getting Started Guide","text":"<p>This guide explains how to integrate Flask Pydantic ReDoc into your project and its basic usage.</p>"},{"location":"getting-started/#basic-setup","title":"Basic Setup","text":"<p>First, initialize Redoc in your Flask application:</p> <pre><code>from flask import Flask\nfrom flask_pydantic_redoc import Redoc\nfrom pydantic import BaseModel, Field\n\napp = Flask(__name__)\nredoc = Redoc(app)\n</code></pre>"},{"location":"getting-started/#defining-models","title":"Defining Models","text":"<p>Define your Pydantic models:</p> <pre><code>class User(BaseModel):\n    id: int = Field(..., description=\"User ID\")\n    username: str = Field(..., description=\"Username\")\n    email: str = Field(..., description=\"Email address\")\n</code></pre>"},{"location":"getting-started/#route-documentation","title":"Route Documentation","text":"<p>Document your routes using docstrings:</p> <pre><code>@app.route('/users', methods=['GET'])\ndef get_users():\n    \"\"\"\n    Returns the list of users.\n    ---\n    get:\n      summary: Get list of users.\n      description: This endpoint retrieves the list of users from the database.\n      responses:\n        200:\n          description: Successful user list response.\n          content:\n            application/json:\n              schema: \n                type: array\n                items: \n                  type: object\n                  properties:\n                    id:\n                      type: integer\n                    username:\n                      type: string\n                    email:\n                      type: string\n    \"\"\"\n    users = [\n        {\"id\": 1, \"username\": \"user1\", \"email\": \"user1@example.com\"},\n        {\"id\": 2, \"username\": \"user2\", \"email\": \"user2@example.com\"}\n    ]\n    return jsonify(users)\n</code></pre>"},{"location":"getting-started/#crud-operations-examples","title":"CRUD Operations Examples","text":""},{"location":"getting-started/#create-user","title":"Create User","text":"<pre><code>@app.route('/users', methods=['POST'])\ndef create_user():\n    \"\"\"\n    Creates a new user.\n    ---\n    post:\n      summary: Create new user.\n      description: This endpoint creates a new user record.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                email:\n                  type: string\n                address:\n                  type: object\n                  properties:\n                    street:\n                      type: string\n                    city:\n                      type: string\n                    country:\n                      type: string\n      responses:\n        201:\n          description: User created successfully.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                  username:\n                    type: string\n                  email:\n                    type: string\n                  address:\n                    type: object\n                    properties:\n                      street:\n                        type: string\n                      city:\n                        type: string\n                      country:\n                        type: string\n    \"\"\"\n    return jsonify({\"message\": \"User created\"}), 201\n</code></pre>"},{"location":"getting-started/#get-user-by-id","title":"Get User by ID","text":"<pre><code>@app.route('/users/&lt;int:user_id&gt;', methods=['GET'])\ndef get_user(user_id):\n    \"\"\"\n    Retrieves information for a specific user.\n    ---\n    get:\n      summary: Get user information.\n      description: This endpoint retrieves information for the user with the specified ID.\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: User information retrieved successfully.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user:\n                    type: object\n                    properties:\n                      id:\n                        type: integer\n                      username:\n                        type: string\n                      email:\n                        type: string\n                  posts:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id:\n                          type: integer\n                        title:\n                          type: string\n                        content:\n                          type: string\n        404:\n          description: User not found.\n    \"\"\"\n    return jsonify({\"message\": \"User information retrieved\"})\n</code></pre>"},{"location":"getting-started/#update-user","title":"Update User","text":"<pre><code>@app.route('/users/&lt;int:user_id&gt;', methods=['PUT'])\ndef update_user(user_id):\n    \"\"\"\n    Updates user information.\n    ---\n    put:\n      summary: Update user information.\n      description: This endpoint updates information for the user with the specified ID.\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                email:\n                  type: string\n                settings:\n                  type: object\n                  properties:\n                    notifications:\n                      type: boolean\n                    theme:\n                      type: string\n                    language:\n                      type: string\n      responses:\n        200:\n          description: User information updated successfully.\n        404:\n          description: User not found.\n    \"\"\"\n    return jsonify({\"message\": \"User updated\"})\n</code></pre>"},{"location":"getting-started/#delete-user","title":"Delete User","text":"<pre><code>@app.route('/users/&lt;int:user_id&gt;', methods=['DELETE'])\ndef delete_user(user_id):\n    \"\"\"\n    Deletes a user.\n    ---\n    delete:\n      summary: Delete user.\n      description: This endpoint deletes the user with the specified ID.\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        204:\n          description: User deleted successfully.\n        404:\n          description: User not found.\n    \"\"\"\n    return \"\", 204\n</code></pre>"},{"location":"getting-started/#accessing-documentation","title":"Accessing Documentation","text":"<p>After starting your application:</p> <ul> <li>Access the ReDoc UI via the <code>/docs</code> endpoint</li> <li>Access the OpenAPI JSON schema via the <code>/docs/json</code> endpoint</li> </ul>"},{"location":"getting-started/#configuration","title":"Configuration","text":"<p>Configuration options to customize Redoc:</p> <pre><code>config = {\n    'title': 'API Documentation',\n    'version': '1.0.0',\n    'openapi_version': '3.0.2',\n    'info': {\n        'title': 'API Documentation',\n        'version': '1.0.0',\n        'description': 'API documentation description'\n    }\n}\n\nredoc = Redoc(app, schemas=[User], config=config)\n</code></pre>"},{"location":"getting-started/#advanced-topics","title":"Advanced Topics","text":"<p>For more detailed information, you can review the Pydantic Integration section. </p>"},{"location":"installation/","title":"Installation","text":"<p>You can follow these steps to add Flask Pydantic ReDoc to your project.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.7+</li> <li>Flask 2.0+</li> <li>Pydantic 2.0+</li> </ul>"},{"location":"installation/#installation-with-pip","title":"Installation with Pip","text":"<p>You can install directly from GitHub:</p> <pre><code>pip install git+https://github.com/ogzcode/flask-redoc-ui\n</code></pre>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<p>If you don't want to install with pip, you can follow these steps for manual installation:</p> <ol> <li>First, install the required packages:</li> </ol> <pre><code>pip install flask pydantic apispec apispec-webframeworks\n</code></pre> <ol> <li> <p>Create a folder named <code>flask_pydantic_redoc</code> in your project.</p> </li> <li> <p>Copy the following files to this folder:</p> </li> <li> <p><code>redoc.py</code> - Main class for ReDoc integration</p> </li> <li><code>pydantic_ext.py</code> - Plugin that converts Pydantic models to OpenAPI schemas</li> <li> <p><code>templates/redoc.html</code> - ReDoc UI template</p> </li> <li> <p>Create an <code>__init__.py</code> file and add the following code:</p> </li> </ol> <pre><code>from .redoc import Redoc\n</code></pre>"},{"location":"installation/#required-dependencies","title":"Required Dependencies","text":"<p>Make sure the following packages are installed for manual installation:</p> <pre><code>Flask&gt;=3.0.0\npydantic&gt;=2.0.0\napispec&gt;=6.0.0\napispec-webframeworks&gt;=1.0.0\n</code></pre>"},{"location":"installation/#dependency-check","title":"Dependency Check","text":"<p>After installation, you can test in the Python console to ensure all dependencies are correctly installed:</p> <pre><code>from flask_pydantic_redoc import Redoc\nfrom flask import Flask\n\napp = Flask(__name__)\nredoc = Redoc(app)\n</code></pre> <p>If you don't get any errors, the installation is successful.</p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>After completing the installation, you can learn how to use Flask Pydantic ReDoc in your application by reviewing the Getting Started Guide. </p>"},{"location":"pydantic/","title":"Pydantic Integration","text":"<p>Flask Pydantic ReDoc automatically generates your API schemas using Pydantic models. In this section, you will learn how to effectively use Pydantic models.</p>"},{"location":"pydantic/#pydantic-plugin","title":"Pydantic Plugin","text":"<p>Flask Pydantic ReDoc uses a special plugin to convert Pydantic models to OpenAPI schemas. This plugin is implemented with the <code>PydanticPlugin</code> class and correctly transfers all features of Pydantic models to OpenAPI schemas.</p> <pre><code>from flask_pydantic_redoc import Redoc\nfrom pydantic import BaseModel, Field\n\napp = Flask(__name__)\n\n# Define your Pydantic models\nclass User(BaseModel):\n    id: int = Field(..., description=\"User ID\")\n    username: str = Field(..., description=\"Username\")\n\n# Add your models when initializing Redoc\nredoc = Redoc(app, schemas=[User])\n</code></pre>"},{"location":"pydantic/#contents","title":"Contents","text":"<p>You can find detailed information about Pydantic integration in the following sections:</p> <ul> <li>Model Examples - Pydantic model examples and OpenAPI schema conversions</li> <li>CRUD Operations - Using Pydantic models in API endpoints</li> </ul>"},{"location":"pydantic/#registering-models-with-redoc","title":"Registering Models with Redoc","text":"<p>To register your models with Redoc:</p> <pre><code>from flask import Flask\nfrom flask_pydantic_redoc import Redoc\n\napp = Flask(__name__)\n\n# Single model\nredoc = Redoc(app, schemas=[User])\n\n# Multiple models\nredoc = Redoc(app, schemas=[User, Address, UserDetail, Product])\n</code></pre>"},{"location":"pydantic/#best-practices","title":"Best Practices","text":"<ol> <li>Always add field descriptions (<code>description</code>)</li> <li>Set default values appropriately</li> <li>Add necessary validations</li> <li>Organize nested models logically</li> <li>Use type hints correctly </li> </ol>"},{"location":"pydantic/crud/","title":"CRUD Operations and Using $ref","text":"<p>After defining your Pydantic models, you can reference them in your API endpoint docstrings. This makes your documentation cleaner and easier to maintain.</p>"},{"location":"pydantic/crud/#model-definitions","title":"Model Definitions","text":"<p>First, let's define the models we'll use:</p> <pre><code>from pydantic import BaseModel, Field\nfrom typing import List, Optional\n\nclass Address(BaseModel):\n    street: str = Field(..., description=\"Street name\")\n    city: str = Field(..., description=\"City\")\n    country: str = Field(..., description=\"Country\")\n\nclass User(BaseModel):\n    id: int = Field(..., description=\"User ID\")\n    username: str = Field(..., description=\"Username\")\n    email: str = Field(..., description=\"Email address\")\n    is_active: bool = Field(default=True, description=\"Is the user active?\")\n    address: Optional[Address] = Field(None, description=\"Address information\")\n\nclass Post(BaseModel):\n    id: int = Field(..., description=\"Post ID\")\n    title: str = Field(..., description=\"Post title\")\n    content: str = Field(..., description=\"Post content\")\n    user_id: int = Field(..., description=\"User ID\")\n\nclass UserCreate(BaseModel):\n    username: str = Field(..., description=\"Username\")\n    email: str = Field(..., description=\"Email address\")\n    address: Optional[Address] = Field(None, description=\"Address information\")\n\nclass UserUpdate(BaseModel):\n    username: Optional[str] = Field(None, description=\"Username\")\n    email: Optional[str] = Field(None, description=\"Email address\")\n    is_active: Optional[bool] = Field(None, description=\"Is the user active?\")\n    address: Optional[Address] = Field(None, description=\"Address information\")\n</code></pre>"},{"location":"pydantic/crud/#crud-endpoints","title":"CRUD Endpoints","text":"<p>Now, let's define endpoints that implement CRUD operations using these models:</p>"},{"location":"pydantic/crud/#user-listing-read-list","title":"User Listing (Read - List)","text":"<pre><code>@app.route('/users', methods=['GET'])\ndef get_users():\n    \"\"\"\n    Returns the list of users.\n    ---\n    get:\n      summary: Get list of users.\n      description: This endpoint retrieves the list of users from the database.\n      responses:\n        200:\n          description: Successful user list response.\n          content:\n            application/json:\n              schema: \n                type: array\n                items: \n                  $ref: '#/components/schemas/User'\n    \"\"\"\n    # Implementation code...\n    return jsonify([])\n</code></pre>"},{"location":"pydantic/crud/#user-creation-create","title":"User Creation (Create)","text":"<pre><code>@app.route('/users', methods=['POST'])\ndef create_user():\n    \"\"\"\n    Creates a new user.\n    ---\n    post:\n      summary: Create new user.\n      description: This endpoint creates a new user record.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserCreate'\n      responses:\n        201:\n          description: User created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    \"\"\"\n    # Implementation code...\n    return jsonify({}), 201\n</code></pre>"},{"location":"pydantic/crud/#user-detail-read-detail","title":"User Detail (Read - Detail)","text":"<pre><code>@app.route('/users/&lt;int:user_id&gt;', methods=['GET'])\ndef get_user(user_id):\n    \"\"\"\n    Retrieves information for a specific user.\n    ---\n    get:\n      summary: Get user information.\n      description: This endpoint retrieves information for the user with the specified ID.\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: User information retrieved successfully.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user:\n                    $ref: '#/components/schemas/User'\n                  posts:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Post'\n        404:\n          description: User not found.\n    \"\"\"\n    # Implementation code...\n    return jsonify({})\n</code></pre>"},{"location":"pydantic/crud/#user-update-update","title":"User Update (Update)","text":"<pre><code>@app.route('/users/&lt;int:user_id&gt;', methods=['PUT'])\ndef update_user(user_id):\n    \"\"\"\n    Updates user information.\n    ---\n    put:\n      summary: Update user information.\n      description: This endpoint updates information for the user with the specified ID.\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserUpdate'\n      responses:\n        200:\n          description: User information updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        404:\n          description: User not found.\n    \"\"\"\n    # Implementation code...\n    return jsonify({})\n</code></pre>"},{"location":"pydantic/crud/#user-deletion-delete","title":"User Deletion (Delete)","text":"<pre><code>@app.route('/users/&lt;int:user_id&gt;', methods=['DELETE'])\ndef delete_user(user_id):\n    \"\"\"\n    Deletes a user.\n    ---\n    delete:\n      summary: Delete user.\n      description: This endpoint deletes the user with the specified ID.\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        204:\n          description: User deleted successfully.\n        404:\n          description: User not found.\n    \"\"\"\n    # Implementation code...\n    return \"\", 204\n</code></pre>"},{"location":"pydantic/crud/#crud-operations-with-related-models","title":"CRUD Operations with Related Models","text":"<p>Endpoints for managing a user's posts:</p>"},{"location":"pydantic/crud/#post-creation","title":"Post Creation","text":"<pre><code>@app.route('/users/&lt;int:user_id&gt;/posts', methods=['POST'])\ndef create_post(user_id):\n    \"\"\"\n    Creates a new post for a user.\n    ---\n    post:\n      summary: Create new post.\n      description: This endpoint creates a new post for the specified user.\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                content:\n                  type: string\n      responses:\n        201:\n          description: Post created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n        404:\n          description: User not found.\n    \"\"\"\n    # Implementation code...\n    return jsonify({}), 201\n</code></pre>"},{"location":"pydantic/crud/#listing-users-posts","title":"Listing User's Posts","text":"<pre><code>@app.route('/users/&lt;int:user_id&gt;/posts', methods=['GET'])\ndef get_user_posts(user_id):\n    \"\"\"\n    Lists a user's posts.\n    ---\n    get:\n      summary: Get user posts.\n      description: This endpoint retrieves all posts for the specified user.\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Posts retrieved successfully.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Post'\n        404:\n          description: User not found.\n    \"\"\"\n    # Implementation code...\n    return jsonify([])\n</code></pre>"},{"location":"pydantic/crud/#best-practices","title":"Best Practices","text":"<ol> <li>Always use <code>$ref</code> to reference models</li> <li>Write detailed docstrings for endpoints</li> <li>Clearly specify request and response schemas</li> <li>Document error cases</li> <li>Specify parameters and their requirements </li> </ol>"},{"location":"pydantic/models/","title":"Pydantic Model Examples","text":"<p>In this section, you will see various Pydantic model examples that you can use with Flask Pydantic ReDoc and how they are converted to OpenAPI schemas.</p>"},{"location":"pydantic/models/#basic-model","title":"Basic Model","text":"<p>A Pydantic model can be defined in its simplest form as follows:</p> <pre><code>from pydantic import BaseModel, Field\nfrom typing import Optional, List\n\nclass User(BaseModel):\n    id: int = Field(..., description=\"User ID\")\n    username: str = Field(..., description=\"Username\")\n    email: str = Field(..., description=\"Email address\")\n    is_active: bool = Field(default=True, description=\"Is the user active?\")\n</code></pre> <p>This model will appear in the OpenAPI schema as follows:</p> <pre><code>{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"description\": \"User ID\"\n    },\n    \"username\": {\n      \"type\": \"string\",\n      \"description\": \"Username\"\n    },\n    \"email\": {\n      \"type\": \"string\",\n      \"description\": \"Email address\"\n    },\n    \"is_active\": {\n      \"type\": \"boolean\",\n      \"description\": \"Is the user active?\",\n      \"default\": true\n    }\n  },\n  \"required\": [\"id\", \"username\", \"email\"]\n}\n</code></pre>"},{"location":"pydantic/models/#nested-models","title":"Nested Models","text":"<p>Pydantic supports nested models, and these models are correctly represented in OpenAPI schemas:</p> <pre><code>class Address(BaseModel):\n    street: str = Field(..., description=\"Street name\")\n    city: str = Field(..., description=\"City\")\n    country: str = Field(..., description=\"Country\")\n\nclass UserDetail(BaseModel):\n    user: User = Field(..., description=\"User information\")\n    address: Optional[Address] = Field(None, description=\"Address information\")\n    interests: List[str] = Field(default_factory=list, description=\"Interests\")\n</code></pre> <p>This nested model will appear in the OpenAPI schema as follows:</p> <pre><code>{\n  \"type\": \"object\",\n  \"properties\": {\n    \"user\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"description\": \"User ID\"\n        },\n        \"username\": {\n          \"type\": \"string\",\n          \"description\": \"Username\"\n        },\n        \"email\": {\n          \"type\": \"string\",\n          \"description\": \"Email address\"\n        },\n        \"is_active\": {\n          \"type\": \"boolean\",\n          \"description\": \"Is the user active?\",\n          \"default\": true\n        }\n      },\n      \"required\": [\"id\", \"username\", \"email\"],\n      \"description\": \"User information\"\n    },\n    \"address\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"street\": {\n          \"type\": \"string\",\n          \"description\": \"Street name\"\n        },\n        \"city\": {\n          \"type\": \"string\",\n          \"description\": \"City\"\n        },\n        \"country\": {\n          \"type\": \"string\",\n          \"description\": \"Country\"\n        }\n      },\n      \"required\": [\"street\", \"city\", \"country\"],\n      \"description\": \"Address information\"\n    },\n    \"interests\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"Interests\",\n      \"default\": []\n    }\n  },\n  \"required\": [\"user\"]\n}\n</code></pre>"},{"location":"pydantic/models/#using-field","title":"Using Field","text":"<p>You can enrich your model fields with the Pydantic <code>Field</code> class:</p> <pre><code>class Product(BaseModel):\n    id: int = Field(..., description=\"Product ID\", gt=0)\n    name: str = Field(..., description=\"Product name\", min_length=3)\n    price: float = Field(..., description=\"Product price\", ge=0)\n    stock: int = Field(default=0, description=\"Stock quantity\", ge=0)\n    tags: List[str] = Field(\n        default_factory=list,\n        description=\"Product tags\",\n        max_items=5\n    )\n</code></pre> <p>This model will appear in the OpenAPI schema as follows:</p> <pre><code>{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"description\": \"Product ID\",\n      \"exclusiveMinimum\": 0\n    },\n    \"name\": {\n      \"type\": \"string\",\n      \"description\": \"Product name\",\n      \"minLength\": 3\n    },\n    \"price\": {\n      \"type\": \"number\",\n      \"description\": \"Product price\",\n      \"minimum\": 0\n    },\n    \"stock\": {\n      \"type\": \"integer\",\n      \"description\": \"Stock quantity\",\n      \"minimum\": 0,\n      \"default\": 0\n    },\n    \"tags\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"Product tags\",\n      \"maxItems\": 5,\n      \"default\": []\n    }\n  },\n  \"required\": [\"id\", \"name\", \"price\"]\n}\n</code></pre>"},{"location":"pydantic/models/#complex-model-examples","title":"Complex Model Examples","text":""},{"location":"pydantic/models/#related-models","title":"Related Models","text":"<p>You can also define more complex related models:</p> <pre><code>class Comment(BaseModel):\n    id: int = Field(..., description=\"Comment ID\")\n    content: str = Field(..., description=\"Comment content\")\n    created_at: str = Field(..., description=\"Creation date\")\n\nclass Post(BaseModel):\n    id: int = Field(..., description=\"Post ID\")\n    title: str = Field(..., description=\"Post title\")\n    content: str = Field(..., description=\"Post content\")\n    comments: List[Comment] = Field(default_factory=list, description=\"Comments\")\n    tags: List[str] = Field(default_factory=list, description=\"Tags\")\n\nclass UserProfile(BaseModel):\n    user: User = Field(..., description=\"User information\")\n    posts: List[Post] = Field(default_factory=list, description=\"User's posts\")\n    followers_count: int = Field(default=0, description=\"Followers count\")\n    following_count: int = Field(default=0, description=\"Following count\")\n</code></pre> <p>These related models will appear in the OpenAPI schema as follows:</p> <pre><code>{\n  \"UserProfile\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"user\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"description\": \"User ID\"\n          },\n          \"username\": {\n            \"type\": \"string\",\n            \"description\": \"Username\"\n          },\n          \"email\": {\n            \"type\": \"string\",\n            \"description\": \"Email address\"\n          },\n          \"is_active\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is the user active?\",\n            \"default\": true\n          }\n        },\n        \"required\": [\"id\", \"username\", \"email\"],\n        \"description\": \"User information\"\n      },\n      \"posts\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"description\": \"Post ID\"\n            },\n            \"title\": {\n              \"type\": \"string\",\n              \"description\": \"Post title\"\n            },\n            \"content\": {\n              \"type\": \"string\",\n              \"description\": \"Post content\"\n            },\n            \"comments\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"integer\",\n                    \"description\": \"Comment ID\"\n                  },\n                  \"content\": {\n                    \"type\": \"string\",\n                    \"description\": \"Comment content\"\n                  },\n                  \"created_at\": {\n                    \"type\": \"string\",\n                    \"description\": \"Creation date\"\n                  }\n                },\n                \"required\": [\"id\", \"content\", \"created_at\"]\n              },\n              \"description\": \"Comments\",\n              \"default\": []\n            },\n            \"tags\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Tags\",\n              \"default\": []\n            }\n          },\n          \"required\": [\"id\", \"title\", \"content\"]\n        },\n        \"description\": \"User's posts\",\n        \"default\": []\n      },\n      \"followers_count\": {\n        \"type\": \"integer\",\n        \"description\": \"Followers count\",\n        \"default\": 0\n      },\n      \"following_count\": {\n        \"type\": \"integer\",\n        \"description\": \"Following count\",\n        \"default\": 0\n      }\n    },\n    \"required\": [\"user\"]\n  }\n}\n</code></pre>"},{"location":"pydantic/models/#using-enums","title":"Using Enums","text":"<p>Pydantic also supports Python enums:</p> <pre><code>from enum import Enum\n\nclass UserRole(str, Enum):\n    ADMIN = \"admin\"\n    MODERATOR = \"moderator\"\n    USER = \"user\"\n\nclass UserWithRole(BaseModel):\n    id: int = Field(..., description=\"User ID\")\n    username: str = Field(..., description=\"Username\")\n    role: UserRole = Field(default=UserRole.USER, description=\"User role\")\n</code></pre> <p>This model will appear in the OpenAPI schema as follows:</p> <pre><code>{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"description\": \"User ID\"\n    },\n    \"username\": {\n      \"type\": \"string\",\n      \"description\": \"Username\"\n    },\n    \"role\": {\n      \"type\": \"string\",\n      \"description\": \"User role\",\n      \"default\": \"user\",\n      \"enum\": [\"admin\", \"moderator\", \"user\"]\n    }\n  },\n  \"required\": [\"id\", \"username\"]\n}\n</code></pre>"},{"location":"pydantic/models/#date-and-time-fields","title":"Date and Time Fields","text":"<p>Pydantic also supports date and time fields:</p> <pre><code>from datetime import datetime, date\nfrom pydantic import BaseModel, Field\n\nclass Event(BaseModel):\n    id: int = Field(..., description=\"Event ID\")\n    title: str = Field(..., description=\"Event title\")\n    event_date: date = Field(..., description=\"Event date\")\n    created_at: datetime = Field(default_factory=datetime.now, description=\"Creation time\")\n</code></pre> <p>This model will appear in the OpenAPI schema as follows:</p> <pre><code>{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"description\": \"Event ID\"\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"description\": \"Event title\"\n    },\n    \"event_date\": {\n      \"type\": \"string\",\n      \"format\": \"date\",\n      \"description\": \"Event date\"\n    },\n    \"created_at\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"description\": \"Creation time\"\n    }\n  },\n  \"required\": [\"id\", \"title\", \"event_date\"]\n}\n</code></pre>"},{"location":"pydantic/models/#best-practices","title":"Best Practices","text":"<ol> <li>Always add field descriptions (<code>description</code>)</li> <li>Set default values appropriately</li> <li>Add necessary validations</li> <li>Organize nested models logically</li> <li>Use type hints correctly </li> </ol>"}]}